{"version":3,"sources":["angular-chart.min.js"],"names":["factory","exports","module","angular","require","Chart","define","amd","ChartJsProvider","options","ChartJs","getOptions","type","typeOptions","extend","this","setOptions","customOptions","$get","ChartJsFactory","$timeout","canUpdateChart","newVal","oldVal","length","Array","isArray","every","element","index","reduce","sum","carry","val","getEventHandler","scope","chart","action","triggerOnlyOnChange","lastState","evt","atEvent","getElementsAtEvent","getPointsAtEvent","activePoints","call","equals","$apply","getColours","colours","copy","chartColours","defaults","global","chartData","push","getColour","map","convertColour","colour","hexToRgb","substr","getRandomColour","getRandomInt","backgroundColor","rgba","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","min","max","Math","floor","random","alpha","usingExcanvas","join","concat","hex","bigint","parseInt","r","g","b","getDataSets","labels","data","series","datasets","item","i","label","fill","setLegend","elem","$parent","parent","$oldLegend","find","legend","generateLegend","replaceWith","append","updateChart","values","forEach","dataset","j","update","$emit","chartLegend","isEmpty","value","Object","keys","isResponsive","chartOptions","responsive","restrict","chartType","chartLabels","chartSeries","chartClick","chartHover","link","resetChart","destroy","createChart","clientHeight","container","cvs","ctx","getContext","console","log","toLowerCase","onclick","noop","onmousemove","document","createElement","className","appendChild","window","G_vmlCanvasManager","initElement","$watch","$on","multiTooltipTemplate","animation","provider","directive"],"mappings":"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","file":"angular-chart.min.js","sourcesContent":["(function (factory) {\n  'use strict';\n  if (typeof exports === 'object') {\n    // Node/CommonJS\n    module.exports = factory(\n      typeof angular !== 'undefined' ? angular : require('angular'),\n      typeof Chart !== 'undefined' ? Chart : require('chart.js'));\n  }  else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['angular', 'chart'], factory);\n  } else {\n    // Browser globals\n    factory(angular, Chart);\n  }\n}(function (angular, Chart) {\n  'use strict';\n\n  Chart.defaults.global.responsive = true;\n  Chart.defaults.global.multiTooltipTemplate = '<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%= value %>';\n\n  Chart.defaults.global.colours = [\n    '#97BBCD', // blue\n    '#DCDCDC', // light grey\n    '#F7464A', // red\n    '#46BFBD', // green\n    '#FDB45C', // yellow\n    '#949FB1', // grey\n    '#4D5360'  // dark grey\n  ];\n\n  var usingExcanvas = typeof window.G_vmlCanvasManager === 'object' &&\n    window.G_vmlCanvasManager !== null &&\n    typeof window.G_vmlCanvasManager.initElement === 'function';\n\n  if (usingExcanvas) Chart.defaults.global.animation = false;\n\n  return angular.module('chart.js', [])\n    .provider('ChartJs', ChartJsProvider)\n    .factory('ChartJsFactory', ['ChartJs', '$timeout', ChartJsFactory])\n    .directive('chartBase', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory(); }])\n    .directive('chartLine', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('line'); }])\n    .directive('chartBar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('bar'); }])\n    .directive('chartRadar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('radar'); }])\n    .directive('chartDoughnut', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('doughnut'); }])\n    .directive('chartPie', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('pie'); }])\n    .directive('chartPolarArea', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('polarArea'); }]);\n\n  /**\n   * Wrapper for chart.js\n   * Allows configuring chart js using the provider\n   *\n   * angular.module('myModule', ['chart.js']).config(function(ChartJsProvider) {\n   *   ChartJsProvider.setOptions({ responsive: true });\n   *   ChartJsProvider.setOptions('Line', { responsive: false });\n   * })))\n   */\n  function ChartJsProvider () {\n    var options = {};\n    var ChartJs = {\n      Chart: Chart,\n      getOptions: function (type) {\n        var typeOptions = type && options[type] || {};\n        return angular.extend({}, options, typeOptions);\n      }\n    };\n\n    /**\n     * Allow to set global options during configuration\n     */\n    this.setOptions = function (type, customOptions) {\n      // If no type was specified set option for the global object\n      if (! customOptions) {\n        customOptions = type;\n        options = angular.extend(options, customOptions);\n        return;\n      }\n      // Set options for the specific chart\n      options[type] = angular.extend(options[type] || {}, customOptions);\n    };\n\n    this.$get = function () {\n      return ChartJs;\n    };\n  }\n\n  function ChartJsFactory (ChartJs, $timeout) {\n    return function chart (type) {\n      return {\n        restrict: 'CA',\n        scope: {\n          getColour: '=?',\n          chartType: '=',\n          chartData: '=?',\n          chartLabels: '=?',\n          chartOptions: '=?',\n          chartSeries: '=?',\n          chartColours: '=?',\n          chartLegend: '@',\n          chartClick: '=?',\n          chartHover: '=?'\n        },\n        link: function (scope, elem/*, attrs */) {\n          var chart, container = document.createElement('div');\n          container.className = 'chart-container';\n          elem.replaceWith(container);\n          container.appendChild(elem[0]);\n\n          if (usingExcanvas) window.G_vmlCanvasManager.initElement(elem[0]);\n\n          // Order of setting \"watch\" matter\n\n          scope.$watch('chartData', function (newVal, oldVal) {\n            //console.log('chartData');\n            if (! newVal || ! newVal.length || (Array.isArray(newVal[0]) && ! newVal[0].length)) return;\n            var chartType = type || scope.chartType;\n            if (! chartType) return;\n\n            if (chart) {\n              if (canUpdateChart(newVal, oldVal)) return updateChart(chart, newVal, scope, elem);\n              chart.destroy();\n            }\n\n            createChart(chartType);\n          }, true);\n\n          scope.$watch('chartSeries', resetChart, true);\n          scope.$watch('chartLabels', resetChart, true);\n          scope.$watch('chartOptions', resetChart, true);\n          scope.$watch('chartColours', resetChart, true);\n\n          scope.$watch('chartType', function (newVal, oldVal) {\n            if (isEmpty(newVal)) return;\n            if (angular.equals(newVal, oldVal)) return;\n            if (chart) chart.destroy();\n            createChart(newVal);\n          });\n\n          scope.$on('$destroy', function () {\n            if (chart) chart.destroy();\n          });\n\n          function resetChart (newVal, oldVal) {\n            if (isEmpty(newVal)) return;\n            if (angular.equals(newVal, oldVal)) return;\n            var chartType = type || scope.chartType;\n            if (! chartType) return;\n\n            // chart.update() doesn't work for series and labels\n            // so we have to re-create the chart entirely\n            if (chart) chart.destroy();\n\n            createChart(chartType);\n          }\n\n          function createChart (type) {\n            if (isResponsive(type, scope) && elem[0].clientHeight === 0 && container.clientHeight === 0) {\n              return $timeout(function () {\n                createChart(type);\n              }, 50, false);\n            }\n            if (! scope.chartData || ! scope.chartData.length) return;\n            scope.getColour = typeof scope.getColour === 'function' ? scope.getColour : getRandomColour;\n            scope.chartColours = getColours(type, scope);\n            var cvs = elem[0], ctx = cvs.getContext('2d');\n            var data = getDataSets(scope.chartLabels, scope.chartData, scope.chartSeries || [], scope.chartColours);\n            var options = angular.extend({}, ChartJs.getOptions(type), scope.chartOptions);\n            console.log(type);\n            chart = new ChartJs.Chart(ctx, {\n              type: type.toLowerCase(),\n              data: data,\n              options: options\n            });\n            scope.$emit('chart-create', chart);\n\n            // Bind events\n            cvs.onclick = scope.chartClick ? getEventHandler(scope, chart, 'chartClick', false) : angular.noop;\n            cvs.onmousemove = scope.chartHover ? getEventHandler(scope, chart, 'chartHover', true) : angular.noop;\n\n            if (scope.chartLegend && scope.chartLegend !== 'false') setLegend(elem, chart);\n          }\n        }\n      };\n    };\n\n    function canUpdateChart (newVal, oldVal) {\n      if (newVal && oldVal && newVal.length && oldVal.length) {\n        return Array.isArray(newVal[0]) ?\n        newVal.length === oldVal.length && newVal.every(function (element, index) {\n          return element.length === oldVal[index].length; }) :\n          oldVal.reduce(sum, 0) > 0 ? newVal.length === oldVal.length : false;\n      }\n      return false;\n    }\n\n    function sum (carry, val) {\n      return carry + val;\n    }\n\n    function getEventHandler (scope, chart, action, triggerOnlyOnChange) {\n      var lastState = null;\n      return function (evt) {\n        var atEvent = chart.getElementsAtEvent || chart.getPointsAtEvent;\n        if (atEvent) {\n          var activePoints = atEvent.call(chart, evt);\n          if (triggerOnlyOnChange === false || angular.equals(lastState, activePoints) === false) {\n            lastState = activePoints;\n            scope[action](activePoints, evt);\n            scope.$apply();\n          }\n        }\n      };\n    }\n\n    function getColours (type, scope) {\n      var colours = angular.copy(scope.chartColours ||\n        ChartJs.getOptions(type).chartColours ||\n        Chart.defaults.global.colours\n      );\n      while (colours.length < scope.chartData.length) {\n        colours.push(scope.getColour());\n      }\n      return colours.map(convertColour);\n    }\n\n    function convertColour (colour) {\n      if (typeof colour === 'object' && colour !== null) return colour;\n      if (typeof colour === 'string' && colour[0] === '#') return getColour(hexToRgb(colour.substr(1)));\n      return getRandomColour();\n    }\n\n    function getRandomColour () {\n      var colour = [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n      return getColour(colour);\n    }\n\n    function getColour (colour) {\n      return {\n        backgroundColor: rgba(colour, 0.2),\n        borderColor: rgba(colour, 1),\n        pointBackgroundColor: rgba(colour, 1),\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: rgba(colour, 0.8)\n      };\n    }\n\n    function getRandomInt (min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    function rgba (colour, alpha) {\n      if (usingExcanvas) {\n        // rgba not supported by IE8\n        return 'rgb(' + colour.join(',') + ')';\n      } else {\n        return 'rgba(' + colour.concat(alpha).join(',') + ')';\n      }\n    }\n\n    // Credit: http://stackoverflow.com/a/11508164/1190235\n    function hexToRgb (hex) {\n      var bigint = parseInt(hex, 16),\n        r = (bigint >> 16) & 255,\n        g = (bigint >> 8) & 255,\n        b = bigint & 255;\n\n      return [r, g, b];\n    }\n\n    function getDataSets (labels, data, series, colours) {\n      return {\n        labels: labels,\n        datasets: data.map(function (item, i) {\n          return angular.extend({}, colours[i], {\n            label: series[i],\n            data: item,\n            fill: true\n          });\n        })\n      };\n    }\n\n    //function getData (labels, data, colours) {\n    //  return labels.map(function (label, i) {\n    //    return angular.extend({}, colours[i], {\n    //      label: label,\n    //      value: data[i],\n    //      color: colours[i].strokeColor,\n    //      highlight: colours[i].pointHighlightStroke\n    //    });\n    //  });\n    //}\n\n    function setLegend (elem, chart) {\n      var $parent = elem.parent(),\n          $oldLegend = $parent.find('chart-legend'),\n          legend = '<chart-legend>' + chart.generateLegend() + '</chart-legend>';\n      if ($oldLegend.length) $oldLegend.replaceWith(legend);\n      else $parent.append(legend);\n    }\n\n    function updateChart (chart, values, scope, elem) {\n      chart.data.datasets.forEach(function (dataset, i) {\n        for (var j = 0; j < values[i].length; j++) {\n          //console.log(values[i][j]);\n          dataset.data[j] = values[i][j];\n        }\n      });\n\n      chart.update();\n      scope.$emit('chart-update', chart);\n      if (scope.chartLegend && scope.chartLegend !== 'false') setLegend(elem, chart);\n    }\n\n    function isEmpty (value) {\n      return ! value ||\n        (Array.isArray(value) && ! value.length) ||\n        (typeof value === 'object' && ! Object.keys(value).length);\n    }\n\n    function isResponsive (type, scope) {\n      var options = angular.extend({}, Chart.defaults.global, ChartJs.getOptions(type), scope.chartOptions);\n      return options.responsive;\n    }\n  }\n}));\n"],"sourceRoot":"/source/"}